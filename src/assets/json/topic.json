{
  "topicsArr": [
    {
      "title": "Introduction to Angular",
      "left": [
        {
          "name": "What is Angular?",
          "discription": "<p>Angular is a comprehensive, <strong>open-source JavaScript framework </strong>for building <strong>dynamic web applications</strong>. Developed and <strong>maintained by Google</strong>, Angular is a popular choice among web developers due to its robust features, <strong>modular architecture</strong>, and <strong>extensive tooling</strong>. It allows developers to create <strong>single-page applications (SPAs)</strong> and complex <strong>web applications</strong> with ease.</p>\n\n<p>Here&#39;s a detailed explanation of Angular&#39;s key features and components:</p>\n\n<p>1. <strong>Component-Based Architecture:</strong>&nbsp;Angular follows a component-based architecture, where the application is broken down into reusable and self-contained building blocks called components. Each component represents a specific part of the user interface and encapsulates its logic, styles, and templates.</p>\n<p><pre><code class=\"language-typescript\">@Component({\n  selector: 'app-example',\n  templateUrl: './example.component.html',\n  styleUrls: ['./example.component.css']\n})\nexport class ExampleComponent { }\n</code></pre></p>\n\n<p>2. <strong>Templates:</strong>&nbsp;Angular uses HTML templates with added syntax, such as directives and data binding, to define the user interface of an application. These templates are dynamic, allowing developers to bind data to the view and update it automatically as data changes.</p>\n<p><pre><code class=\"language-markup\">&lt;div&gt\n  {{ dataBindingVariable }}\n  &lt;button (click)=\"onButtonClick()\"&gt;Click Me&lt;/button&gt;\n&lt;/div&gt;\n</code></pre></p>\n\n<p>3. <strong>Data Binding:</strong> Angular provides two-way data binding, allowing data to flow seamlessly between the view and the component. This means that changes in the UI are reflected in the underlying data, and vice versa, without the need for manual synchronization.</p>\n<pre><code class=\"language-markup\">&lt;input [(ngModel)]=\"dataBindingVariable\"&gt;\n</code></pre>\n<p>4. <strong>Dependency Injection:&nbsp;</strong>Angular&#39;s dependency injection system helps manage the dependencies between different parts of an application. It promotes the use of reusable and testable components by providing a way to inject services or dependencies into components.</p>\n<pre><code class=\"language-typescript\">constructor(private exampleService: ExampleService) { }\n</code></pre>\n<p>5. <strong>Directives:</strong> Directives are special markers in the DOM that tell Angular to attach behavior or modify the DOM elements. Angular comes with built-in directives like ngIf, ngFor, and ngStyle, and you can create custom directives as well.</p>\n<pre><code class=\"language-markup\">&lt;div *ngIf=\"isVisible\"&gt;This is visible.&lt;/div&gt;\n</code></pre>\n<p>6. <strong>Services:&nbsp;</strong>Services are singleton objects that are responsible for performing specific tasks or providing data to components. They are a crucial part of Angular for sharing data, handling HTTP requests, and encapsulating application logic.</p>\n<pre><code class=\"language-typescript\">@Injectable({\n  providedIn: 'root',\n})\nexport class ExampleService { }\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExampleService { }\n</code></pre>\n<p>7. <strong>Routing:&nbsp;</strong>Angular&#39;s router module allows developers to create client-side navigation and manage application URLs. It enables the development of multi-page-like applications within a single-page application.</p>\n<pre><code class=\"language-typescript\">const routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'about', component: AboutComponent },\n];\nconst routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'about', component: AboutComponent },\n];\n</code></pre>\n<p>8. <strong>HTTP Client:</strong>&nbsp;Angular provides an HTTP client module for making HTTP requests to external APIs or backend services. It simplifies handling RESTful API calls and supports various request methods like GET, POST, PUT, and DELETE.</p>\n<pre><code class=\"language-typescript\">httpClient.get('/api/data').subscribe((data) => {\n  // Handle data here\n});\nhttpClient.get('/api/data').subscribe((data) => {\n  // Handle data here\n});\n</code></pre>\n<p>9. <strong>Forms:</strong>&nbsp;Angular offers robust support for building both template-driven forms and reactive forms. These forms provide extensive validation, error handling, and form data management capabilities.</p>\n<pre><code class=\"language-markup\">&lt;form (submit)=\"onFormSubmit()\"&gt;\n  &lt;input [(ngModel)]=\"formData\"&gt;\n&lt;/form&gt;\n&lt;form (submit)=\"onFormSubmit()\"&gt;\n  &lt;input [(ngModel)]=\"formData\"&gt;\n&lt;/form&gt;\n</code></pre>\n<p>10. <strong>Testing:</strong>&nbsp;Angular is designed with testability in mind. It provides tools and utilities for writing unit tests, integration tests, and end-to-end tests using frameworks like Jasmine and Protractor.</p>\n<pre><code class=\"language-typescript\">it('should create the app', () => {\n  const fixture = TestBed.createComponent(AppComponent);\n  const app = fixture.componentInstance;\n  expect(app).toBeTruthy();\n});\nit('should create the app', () => {\n  const fixture = TestBed.createComponent(AppComponent);\n  const app = fixture.componentInstance;\n  expect(app).toBeTruthy();\n});\n</code></pre>\n<p>11. <strong>CLI (Command Line Interface):</strong>&nbsp;Angular CLI is a powerful command-line tool that simplifies the creation, development, and deployment of Angular applications. It generates project scaffolding, automates common development tasks, and optimizes production builds.</p>\n<pre><code class=\"language-typescript\">ng new my-app\nng generate component my-component\nng build --prod\n</code></pre>\n<p>12. <strong>Cross-Platform Development:</strong>&nbsp;With technologies like Angular Universal (for server-side rendering) and Angular for mobile (using frameworks like Ionic), you can extend your Angular application to target various platforms, including web, mobile, and desktop.</p>\n\n<ul>\n\t<li>Angular Universal for server-side rendering.</li>\n\t<li>Ionic for mobile and desktop applications.</li>\n</ul>\n\n<p>Angular has a steep learning curve due to its comprehensive feature set, but it offers a robust and organized way to build large-scale web applications. It is backed by a vibrant community and has a rich ecosystem of libraries and extensions, making it a popular choice for modern web development.</p>\n"
        }
      ],
      "right": [
        {
          "name": "Advantages and key features of Angular",
          "discription": "<p>Angular is a comprehensive, open-source JavaScript framework for building dynamic web applications. Developed and maintained by Google, Angular is a popular choice among web developers due to its robust features, modular architecture, and extensive tooling. It allows developers to create single-page applications (SPAs) and complex web applications with ease.</p>\n\n<p>Here&#39;s a detailed explanation of Angular&#39;s key features and components:</p>\n\n<p>1. <strong>Modular Development</strong>: Angular applications are organized into modules. A module is a logical grouping of components, services, and other features. Modules help in organizing and separating concerns within an application, making it more modular and maintainable. Angular encourages a modular approach to application development, which involves breaking down your application into smaller, self-contained modules. These modules serve as building blocks, enhancing code maintainability and reusability. By creating modular components, you can manage the complexity of your application more effectively and encourage a structured development process. Here&#39;s an example of defining an Angular module:</p>\n\n<p><pre><code class=\"language-typescript\">@NgModule({\n     declarations: [AppComponent, HeaderComponent, FooterComponent],\n     imports: [CommonModule, FormsModule],\n     providers: [DataService],\n   })\nexport class AppModule {}\n</code></pre></p>\n\n<p>2. <strong>Two-Way Data Binding:&nbsp;</strong>Angular&#39;s two-way data binding simplifies the synchronization of data between the model (component) and the view (template). This bi-directional data flow reduces the need for manual DOM manipulation and enhances code readability. It ensures that changes in one part of the application automatically propagate to the other. Here&#39;s an example of two-way data binding in an input field:</p>\n\n<p><pre><code class=\"language-markup\">&lt;input [(ngModel)]=\"name\"&gt;\n&lt;p&gt;Hello, {{ name }}!&lt;/p&gt;\n</code></pre></p>\n\n<p>3. <strong>Component-Based Architecture:</strong>&nbsp;Angular revolves around a component-based architecture, where applications are built using self-contained and reusable components. Each component encapsulates its logic, styles, and templates, promoting code separation and maintainability. Here&#39;s a snippet illustrating the creation of an Angular component:</p>\n\n<p><pre><code class=\"language-typescript\">@Component({\n     selector: 'app-example',\n     templateUrl: './example.component.html',\n     styleUrls: ['./example.component.css']\n   })\nexport class ExampleComponent { }\n</code></pre></p>\n\n<p>4. <strong>Dependency Injection:</strong>&nbsp;Angular&#39;s dependency injection system simplifies the management of dependencies between components and services. It encourages modularity and testability by allowing you to inject services or dependencies into components. This promotes clean code organization. Below is an example of injecting a service in Angular:</p>\n\n<p><pre><code class=\"language-typescript\">constructor(private dataService: DataService) { }\n</code></pre></p>\n\n<p>5. <strong>TypeScript:</strong>&nbsp;Angular is written in TypeScript, a statically typed superset of JavaScript. TypeScript provides strong type checking and improved tooling support, reducing the chances of runtime errors and improving code quality. Here&#39;s an example of using TypeScript in Angular:</p>\n\n<p><pre><code class=\"language-typescript\">class AppComponent {\n     message: string = 'Hello, TypeScript!';\n}\n</code></pre></p>\n\n<p>6. <strong>Rich Templating:</strong>&nbsp;Angular&#39;s HTML templates support a wide range of features, including directives, data binding, and custom templates. This allows for the creation of dynamic and responsive user interfaces with minimal code. A simple template with data binding might look like this:</p>\n\n<p><pre><code class=\"language-markup\">&lt;p&gt;{{ dynamicData }}&lt;/p&gt;\n</code></pre></p>\n\n<p>7. <strong>Directives:</strong>&nbsp;Angular includes built-in directives like `ngIf`, `ngFor`, and `ngSwitch` for manipulating the DOM and controlling the rendering of elements based on conditions. You can also create custom directives to extend functionality. Here&#39;s an example using the `ngIf` structural directive:</p>\n\n<p><pre><code class=\"language-markup\">&lt;div *ngIf=\"isVisible\"&gt;This is visible.&lt;/div&gt;\n</code></pre></p>\n\n<p>8. <strong>Cross-Platform Development:</strong> Angular supports cross-platform development with technologies like Angular Universal for server-side rendering and platforms like Ionic for mobile and desktop. You can create an Ionic Angular app with the following command:</p>\n\n<p><pre><code class=\"language-typescript\">ionic start my-app blank --type=angular\n</code></pre></p>\n\n<p>9. <strong>Powerful Forms:</strong>&nbsp;Angular provides robust support for building forms, including template-driven forms and reactive forms. These forms offer features like validation, custom validators, and form data management. Here&#39;s an example of creating a reactive form:</p>\n\n<p><pre><code class=\"language-markup\">&lt;form [formGroup]=\"myForm\" (ngSubmit)=\"onSubmit()\"&gt;\n  &lt;input formControlName=\"name\"&gt;\n  &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre></p>\n\n<p>10. <strong>Router:</strong>&nbsp;Angular&#39;s router module allows developers to create complex client-side navigation, enabling the development of multi-page-like applications within a single-page application. You can configure routes like this:</p>\n\n<p><pre><code class=\"language-typescript\">const routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'about', component: AboutComponent },\n];\n</code></pre></p>\n\n<p>11. <strong>HTTP Client: </strong>Angular&#39;s HTTP client simplifies making HTTP requests to external APIs or backend services. It supports various request methods, interceptors, and error handling. Here&#39;s an example of making an HTTP GET request:</p>\n\n<p><pre><code class=\"language-typescript\">httpClient.get('/api/data').subscribe((data) => {\n  // Handle data here\n});\n</code></pre></p>\n\n<p>12. <strong>Testing:</strong> Angular is designed with testability in mind. It provides tools and utilities for writing unit tests, integration tests, and end-to-end tests using frameworks like Jasmine, Protractor, and Karma. An example of writing a Jasmine unit test:</p>\n\n<p><pre><code class=\"language-typescript\">it('should create the app', () => {\n  const fixture = TestBed.createComponent(AppComponent);\n  const app = fixture.componentInstance;\n  expect(app).toBeTruthy();\n});\n</code></pre></p>\n\n<p>13. <strong>Angular CLI:</strong>&nbsp;The Angular CLI is a powerful command-line tool that automates common development tasks, such as project setup, code generation, and building for production. It enforces best practices and maintains project consistency. You can create a new Angular app with the CLI using:</p>\n\n<p><pre><code class=\"language-typescript\">ng new my-app\n</code></pre></p>\n\n<p>14. <strong>Internationalization (i18n):&nbsp;</strong>Angular provides tools for internationalization and localization, making it easier to create applications that can be used in different languages and regions. You can use Angular&#39;s i18n features for translation, like this:</p>\n\n<p><pre><code class=\"language-markup\">&lt;p i18n&gt;Hello, World!&lt;/p&gt;\n</code></pre></p>\n\n<p>15. <strong>MVC Architecture:</strong>&nbsp;Angular follows the Model-View-Controller (MVC) architectural pattern. In this pattern, the Model represents the application&#39;s data and business logic, the View handles the presentation and user interface, and the Controller (or in Angular&#39;s case, the Component) acts as an intermediary that connects the Model and View.<br />\n<pre><code class=\"language-typescript\">// Component (Controller)\nexport class AppComponent {\n  // Model\n  data: string = 'Hello, MVC!';\n}\n</code></pre></p>\n\n<p>16. <strong>Lifecycle Hooks:</strong> Angular components have a lifecycle, and developers can tap into various lifecycle events to perform tasks at specific points in a component&#39;s life, such as initialization, content rendering, and destruction. Some common lifecycle hooks include `ngOnInit`, `ngOnDestroy`, and `ngOnChanges`.<br />\n<pre><code class=\"language-typescript\">// Lifecycle hook example\nexport class MyComponent implements OnInit, OnDestroy {\n  ngOnInit() {\n    // Initialization code\n  }\n\n  ngOnDestroy() {\n    // Cleanup code\n  }\n}\n</code></pre></p>\n\n<p>17. <strong>Observables and RxJS:&nbsp;</strong>Angular leverages Reactive Extensions for JavaScript (RxJS) to handle asynchronous operations and manage data streams. Observables are a key part of Angular&#39;s reactive programming approach, enabling developers to work with asynchronous data in a more structured and efficient manner.<br />\n<pre><code class=\"language-typescript\">// Using RxJS Observables\nimport { Observable } from 'rxjs';\n\nconst observable = new Observable<number>((observer) => {\n  observer.next(1);\n  observer.next(2);\n  observer.complete();\n});\n\nobservable.subscribe((value) => {\n  console.log(value);\n});\n</code></pre></p>\n\n<p>18.<strong> Angular Material:&nbsp;</strong>Angular Material is a popular UI component library for Angular applications. It offers a wide range of pre-designed, customizable UI components like buttons, forms, navigation menus, and dialogs, helping developers create visually appealing and responsive user interfaces.<br />\n<pre><code class=\"language-typescript\"># Install Angular Material\nng add @angular/material\n</code></pre></p>\n\n<p>19. <strong>Lazy Loading:</strong>&nbsp;Angular allows you to load modules and their associated components only when needed, improving application performance. This feature is particularly useful for large applications with many features, as it reduces the initial load time.<br />\n<pre><code class=\"language-typescript\">// Lazy loading configuration\nconst routes: Routes = [\n  { path: 'dashboard', loadChildren: () => import('./dashboard.module').then(m => m.DashboardModule) },\n];\n</code></pre></p>\n\n<p>20. <strong>Change Detection:</strong>&nbsp;Angular has a built-in change detection mechanism that automatically updates the view when the underlying data changes. Developers can control and optimize change detection strategies to improve application performance.<br />\n<pre><code class=\"language-typescript\">// Change detection example\nimport { ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // ...\n})\n</code></pre></p>\n\n<p>21. <strong>Decorators:</strong>&nbsp;Decorators are a TypeScript feature used extensively in Angular. They provide metadata that Angular uses to understand and configure various parts of your application. Common decorators include `@Component`, `@NgModule`, and `@Injectable`.<br />\n<pre><code class=\"language-typescript\">// Using decorators \n@Component({ \n   selector: 'app-example',\n   templateUrl: './example.component.html',\n   styleUrls: ['./example.component.css'] \n  }) \nexport class ExampleComponent { }\n</code></pre></p>\n\n<p>22. <strong>Security:</strong>&nbsp;Angular includes built-in security mechanisms to protect against common web vulnerabilities, such as Cross-Site Scripting (XSS) and Cross-Site Request Forgery (CSRF). It also promotes best practices for handling authentication and authorization securely. Implementing secure authentication and authorization is a critical aspect of Angular applications.</p>\n\n<p>23. <strong>State Management:</strong> While Angular itself doesn&#39;t prescribe a specific state management library, developers can choose from various state management solutions, such as NgRx (inspired by Redux), to manage complex application state.</p>\n\n<p>24.<strong> Community and Ecosystem:&nbsp;</strong>Angular benefits from a large and active community of developers, which means access to a wealth of resources, libraries, plugins, and community-contributed solutions. It also receives regular updates and improvements from Google.</p>\n\n<p>25. <strong>Performance Optimization:&nbsp;</strong>Angular provides tools and best practices for optimizing application performance, including Ahead-of-Time (AOT) compilation, lazy loading, tree shaking, and code splitting.</p>\n\n<p>These detailed explanations, along with code snapshots, provide a comprehensive understanding of each core concept and feature of Angular.</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n"
        }
      ]
    },
    {
      "title": "JavaScript Basic",
      "left": [
        {
          "name": "Variables",
          "discription": "<h3><strong><span style=\"font-size:14px\">In JavaScript, variables are used to store and manage data. They are containers for storing values, and the value can be of various types such as numbers, strings, booleans, objects, or even functions. To create a variable in JavaScript, you use the <code>var</code>, <code>let</code>, or <code>const</code> keyword, followed by the name of the variable.</span></strong></h3>\n\n<p><strong><span style=\"font-size:14px\">Here are 10 examples that illustrate the differences between <code>var</code>, <code>let</code>, and <code>const</code> in JavaScript:</span></strong></p>\n\n<p><strong><span style=\"font-size:16px\">1. Scoping:</span></strong></p><p></p><pre><code class=\"language-typescript\">// Using var (function-scoped) \n function exampleVar() {\n   if (true) {\n     var x = 10;\n   }\n   console.log(x); // 10\n }\n \n // Using let (block-scoped)\n function exampleLet() {\n   if (true) {\n     let y = 20;\n   }\n   // console.log(y); // Error: y is not defined\n }\n \n // Using const (block-scoped)\n function exampleConst() {\n   if (true) {\n     const z = 30;\n   }\n   // console.log(z); // Error: z is not defined\n}\n</pre></code>\n<p><strong><span style=\"font-size:16px\">2. Reassignment:</span></strong></p>\n<pre><code class=\"language-typescript\">// Using var (can be reassigned)\n var a = 5;\n a = 10;\n \n // Using let (can be reassigned)\n let b = 'hello';\n b = 'world';\n \n // Using const (cannot be reassigned)\n const c = true;\n // c = false; // Error: Assignment to constant variable.\n </pre></code>\n<p><strong><span style=\"font-size:16px\">3. Declaration Hoisting:</span></strong></p>\n<pre><code class=\"language-typescript\">// Using var (hoisted, value is undefined until the assignment)\nconsole.log(d); // undefined\nvar d = 15;\n\n// Using let (not hoisted)\n// console.log(e); // Error: Cannot access 'e' before initialization\nlet e = 'example';\n\n// Using const (not hoisted)\n// console.log(f); // Error: Cannot access 'f' before initialization\nconst f = [1, 2, 3]; \n </pre></code>\n<p><strong><span style=\"font-size:16px\">4. Global Object Property:</span></strong></p>\n<pre><code class=\"language-typescript\">// Using var (attaches to the global object)\n var globalVar = 'I am global';\n console.log(window.globalVar); // 'I am global' (in a browser environment)\n \n // Using let (does not attach to the global object)\n let localVar = 'I am local';\n console.log(window.localVar); // undefined\n \n // Using const (does not attach to the global object)\n const constVar = 'I am constant';\n console.log(window.constVar); // undefined\n </pre></code><p><strong><span style=\"font-size:16px\">5. Temporal Dead Zone (TDZ):</span></strong></p>\n<pre><code class=\"language-typescript\">// Using var (no TDZ, logs undefined)\n console.log(tempVar); // undefined\n var tempVar = 25;\n \n // Using let (has TDZ, results in an error)\n // console.log(tempLet); // Error: Cannot access 'tempLet' before initialization\n let tempLet = 30;\n \n // Using const (has TDZ, results in an error)\n // console.log(tempConst); // Error: Cannot access 'tempConst' before initialization\n const tempConst = 35;\n </pre></code><p><strong><span style=\"font-size:16px\">6. For Loop Example:</span></strong></p>\n<pre><code class=\"language-typescript\">// Using var (function-scoped, can lead to unintended behavior in loops)\n   for (var i = 0; i < 3; i++) {\n     setTimeout(function() {\n       console.log(i); // 3, 3, 3\n     }, 1000);\n   }\n   \n   // Using let (block-scoped, expected behavior in loops)\n   for (let j = 0; j < 3; j++) {\n     setTimeout(function() {\n       console.log(j); // 0, 1, 2\n     }, 1000);\n   }\n    </pre></code><p><strong><span style=\"font-size:16px\">7. Object Property Reassignment:</span></strong></p>\n<pre><code class=\"language-typescript\">// Using var (can be reassigned)\n var objVar = { key: 'value' };\n objVar.key = 'new value';\n \n // Using let (can be reassigned)\n let objLet = { key: 'value' };\n objLet.key = 'new value';\n \n // Using const (cannot be reassigned, but object properties can be modified)\n const objConst = { key: 'value' };\n objConst.key = 'new value';\n </pre></code><p><strong><span style=\"font-size:16px\">8. Array Modification:</span></strong></p>\n<pre><code class=\"language-typescript\">// Using var (can be reassigned)\n  var arrVar = [1, 2, 3];\n  arrVar.push(4);\n  \n  // Using let (can be reassigned)\n  let arrLet = [1, 2, 3];\n  arrLet.push(4);\n  \n  // Using const (cannot be reassigned, but array elements can be modified)\n  const arrConst = [1, 2, 3];\n  arrConst.push(4);\n   </pre></code><p><strong><span style=\"font-size:16px\">9. Function Declaration:</span></strong></p>\n<pre><code class=\"language-typescript\">// Using var (hoisted, can be reassigned)\n function exampleFunctionVar() {\n   console.log('Hello from var!');\n }\n \n // Using let (not hoisted, can be reassigned)\n let exampleFunctionLet = function() {\n   console.log('Hello from let!');\n };\n \n // Using const (not hoisted, cannot be reassigned)\n const exampleFunctionConst = function() {\n   console.log('Hello from const!');\n };\n </pre></code><p><strong><span style=\"font-size:16px\">10. Template Literals:</span></strong></p>\n<pre><code class=\"language-typescript\">// Using var (can be used in template literals)\n var nameVar = 'John';\n console.log(`Hello, ${nameVar}!`); // 'Hello, John!'\n \n // Using let (can be used in template literals)\n let nameLet = 'Jane';\n console.log(`Hello, ${nameLet}!`); // 'Hello, Jane!'\n \n // Using const (can be used in template literals)\n const nameConst = 'Doe';\n console.log(`Hello, ${nameConst}!`); // 'Hello, Doe!'\n </pre></code>\n<h3><strong><span style=\"font-size:14px\">Here&#39;s an expanded set of examples illustrating the differences between <code>var</code>, <code>let</code>, and <code>const</code> in JavaScript:</span></strong></h3>\n<pre><code class=\"language-typescript\">// Example 1: Scope\n function exampleScope() {\n   if (true) {\n     var varExample = 'I am var'; // Function-scoped\n     let letExample = 'I am let'; // Block-scoped\n     const constExample = 'I am const'; // Block-scoped\n   }\n   console.log(varExample); // Works\n   // console.log(letExample); // Error: letExample is not defined\n   // console.log(constExample); // Error: constExample is not defined\n }\n \n // Example 2: Hoisting\n function exampleHoisting() {\n   console.log(varHoist); // undefined\n   var varHoist = 42;\n \n   // console.log(letHoist); // Error: Cannot access 'letHoist' before initialization\n   let letHoist = 'Hello';\n \n   // console.log(constHoist); // Error: Cannot access 'constHoist' before initialization\n   const constHoist = true;\n }\n \n // Example 3: Reassignment\n var varReassign = 'I am var';\n varReassign = 'I can be reassigned';\n \n let letReassign = 'I am let';\n letReassign = 'I can be reassigned';\n \n const constReassign = 'I am const';\n // constReassign = 'I cannot be reassigned'; // Error: Assignment to constant variable\n \n // Example 4: Declaration\n var declaredVar;\n let declaredLet;\n // const declaredConst; // Error: Missing initializer in const declaration\n \n // Example 5: Global Object Property\n var globalVar = 'I am global';\n console.log(window.globalVar); // 'I am global' (in a browser environment)\n \n let localVar = 'I am local';\n console.log(window.localVar); // undefined\n \n const constVar = 'I am constant';\n console.log(window.constVar); // undefined\n \n // Example 6: Temporal Dead Zone (TDZ)\n // console.log(tdVar); // Error: Cannot access 'tdVar' before initialization\n var tdVar = 25;\n \n // console.log(tdLet); // Error: Cannot access 'tdLet' before initialization\n let tdLet = 30;\n \n // console.log(tdConst); // Error: Cannot access 'tdConst' before initialization\n const tdConst = 35;\n \n // Example 7: For Loop Behavior\n for (var i = 0; i < 3; i++) {\n   setTimeout(function() {\n     console.log('Var in loop:', i); // 3, 3, 3\n   }, 1000);\n }\n \n for (let j = 0; j < 3; j++) {\n   setTimeout(function() {\n     console.log('Let in loop:', j); // 0, 1, 2\n   }, 1000);\n }\n \n // Example 8: Redeclaration\n var redeclareVar = 'I am var';\n var redeclareVar = 'I can be redeclared';\n \n let redeclareLet = 'I am let';\n // let redeclareLet = 'I cannot be redeclared'; // Error: Identifier 'redeclareLet' has already been declared\n \n // const redeclareConst = 'I am const'; // Error: Identifier 'redeclareConst' has already been declared\n \n // Example 9: Object Property Reassignment\n var objVar = { key: 'value' };\n objVar.key = 'new value';\n \n let objLet = { key: 'value' };\n objLet.key = 'new value';\n \n const objConst = { key: 'value' };\n objConst.key = 'new value';\n \n // Example 10: Array Modification\n var arrVar = [1, 2, 3];\n arrVar.push(4);\n \n let arrLet = [1, 2, 3];\n arrLet.push(4);\n \n const arrConst = [1, 2, 3];\n arrConst.push(4);\n \n // Example 11: Function Scope\n function exampleFunctionScope() {\n   if (true) {\n     var functionVar = 'I am function-scoped';\n     let functionLet = 'I am block-scoped';\n   }\n   console.log(functionVar); // Works\n   // console.log(functionLet); // Error: functionLet is not defined\n }\n \n // Example 12: Function Declaration\n function exampleFunctionDeclarationVar() {\n   console.log('Hello from var!');\n }\n \n let exampleFunctionDeclarationLet = function() {\n   console.log('Hello from let!');\n };\n \n const exampleFunctionDeclarationConst = function() {\n   console.log('Hello from const!');\n };\n \n // Example 13: Default Values\n var defaultVar;\n let defaultLet;\n // const defaultConst; // Error: Missing initializer in const declaration\n \n // Example 14: Usage in Loops\n for (var k = 0; k < 3; k++) {\n   setTimeout(function() {\n     console.log('Var in loop:', k); // 3, 3, 3\n   }, 1000);\n }\n \n for (let l = 0; l < 3; l++) {\n   setTimeout(function() {\n     console.log('Let in loop:', l); // 0, 1, 2\n   }, 1000);\n }\n \n // Example 15: Template Literals\n var nameVar = 'John';\n console.log(`Hello, ${nameVar}!`); // 'Hello, John!'\n \n let nameLet = 'Jane';\n console.log(`Hello, ${nameLet}!`); // 'Hello, Jane!'\n \n const nameConst = 'Doe';\n console.log(`Hello, ${nameConst}!`); // 'Hello, Doe!'\n </pre></code>"
        },
        {
          "name": "Operators"
        },
        {
          "name": "Functions"
        },
        {
          "name": "Arrays"
        },
        {
          "name": "Objects"
        },
        {
          "name": "Strings"
        }
      ],
      "right": [
        {
          "name": "Control Flow"
        },
        {
          "name": "Error Handling"
        },
        {
          "name": "DOM Manipulation"
        },
        {
          "name": "Asynchronous Programming"
        },
        {
          "name": "JSON"
        },
        {
          "name": "Modules"
        }
      ]
    },
    {
      "title": "JavaScript",
      "left": [
        {
          "name": "Variables and Data Types",
          "discription": "<p>JavaScript provides different&nbsp;<strong>data types</strong>&nbsp;to hold different types of values. There are two types of data types in JavaScript.</p>\n\n<ol>\n\t<li><strong>Primitive data type</strong></li>\n\t<li><strong>Non-primitive (reference) data type</strong></li>\n</ol>\n\n<p><span style=\"font-size:16px\"><strong>Primitive Data Types:</strong></span></p>\n\n<p>1. <strong>Number:</strong><br />\n&nbsp; &nbsp;A number is a primitive data type in JavaScript used to represent numeric values. It can be an integer like 42 or a floating-point number like 3.14. Numbers are used in various mathematical calculations, comparisons, and other operations within JavaScript programs. They do not have methods or properties like objects but can be stored in variables and manipulated directly.</p>\n <pre><code class=\"language-typescript\"> var age = 25;    // Age of a person \n var price = 99.99;    // Price of a product \n var quantity = 42;    // Number of items \n var temperature = -5.5;    // Temperature in Celsius \n var distance = 1000;    // Distance in meters \n</code></pre>\n\n<p>2. <strong>String:</strong><br />\n&nbsp; &nbsp;Strings are sequences of characters enclosed in single (&#39; &#39;) or double (&quot; &quot;) quotes. They represent textual data and are fundamental for working with human-readable information. Strings can contain letters, numbers, symbols, and whitespace. JavaScript provides many built-in methods for manipulating and analyzing strings, such as concatenation, substring extraction, and length retrieval.</p>\n <pre><code class=\"language-typescript\"> var name = \"Alice\";    // Person\\'s name \n var message = 'Welcome to JavaScript!';    // Greeting message \n var empty = \"\";    // An empty string \n var greeting = \"Hello, World!\";    // General greeting \n var title = \"JavaScript Basics\";   // Title of a document </pre></code>\n\n<p>3. <strong>Boolean:</strong><br />\n&nbsp; &nbsp;Booleans represent binary values - either true or false. They are used for conditional logic, decision-making, and comparison operations in JavaScript. Booleans are crucial for controlling program flow, enabling code to execute different paths based on the evaluation of conditions.</p>\n <pre><code class=\"language-typescript\"> var isTrue = true;       // True value\n var isFalse = false;     // False value \n var isGreater = 10 > 5;     // Result of a comparison \n var hasValue = true || false;     // Logical OR\n var isNotEmpty = \"Hello\" !== \"\";     // String comparison </pre></code>\n\n<p>4. <strong>Undefined:</strong><br />\n&nbsp; &nbsp;Undefined is a special primitive value that represents the absence of a value. When a variable is declared but not assigned a value, it is automatically initialized to undefined. It is often used to indicate that a variable has been declared but not yet used or assigned.</p>\n<pre><code class=\"language-typescript\"> var uninitializedVar;   // Variable declared but not assigned \n var notAssigned;        // Another uninitialized variable\n var undefinedValue = undefined; // Variable explicitly set as undefined\n var anotherUndefined;   // Yet another uninitialized variable\n</pre></code>\n\n<p>5. <strong>Null:</strong><br />\n&nbsp; &nbsp;Null is another special primitive value that denotes the intentional absence of any object or value. It is often used to indicate that a variable should be empty or devoid of any meaningful data. It&#39;s different from undefined, as it is a deliberate assignment.</p>\n<pre><code class=\"language-typescript\"> var emptyValue = null;  // Variable set to null\n var noData = null;      // Another null variable\n var invalid = null;     // Null indicating invalid data\n var blank = null;       // Null representing a blank value</pre></code>\n\n<p>6. <strong>Symbol:</strong><br />\n&nbsp; &nbsp;Symbols are a relatively new addition to JavaScript introduced in ECMAScript 6 (ES6). They are unique and immutable values often used as property keys in objects. Symbols help prevent unintended property name collisions and can be used to create private object properties.</p>\n<pre><code class=\"language-typescript\"> var uniqueSymbol1 = Symbol(\"description 1\"); // Unique symbol with description\n var uniqueSymbol2 = Symbol(\"description 2\"); // Another unique symbol\n var loginSymbol = Symbol(\"Login\");           // Symbol representing login\n var emailSymbol = Symbol(\"Email\");           // Symbol representing email\n var accessSymbol = Symbol(\"Access\");         // Symbol representing access control\n var uniqueKey = Symbol();                    // Symbol with a unique key\n var hiddenProperty = Symbol(\"hidden\");       // Symbol for hidden property\n var specialFlag = Symbol(\"special\");         // Symbol for special flag\n var privateProperty = Symbol(\"private\");     // Symbol for private property\n var customAction = Symbol(\"action\");         // Symbol for custom action\n</pre></code>\n\n<p><span style=\"font-size:16px\"><strong>Non-Primitive (Reference) Data Types:</strong></span></p>\n\n<p>1. <strong>Object:</strong><br />\n&nbsp; &nbsp;An object is a non-primitive data type in JavaScript that stores a collection of key-value pairs, where keys are strings (or symbols) and values can be of any data type. Objects are versatile and used for creating complex data structures, modeling real-world entities, and organizing related data.</p>\n <pre><code class=\"language-typescript\"> var person = {                 // Person object\n    name: \"Bob\",\n    age: 30,\n};\nvar product = {                // Product object\n    name: \"Laptop\",\n    price: 999.99,\n};\nvar customer = {               // Customer object\n    firstName: \"Jane\",\n    lastName: \"Doe\",\n};\nvar order = {                  // Order object\n    id: 12345,\n    items: [\"item1\", \"item2\"],\n};\nvar city = {                   // City object\n    name: \"New York\",\n    population: 8000000,\n};\nvar car = {                    // Car object\n    make: \"Toyota\",\n    model: \"Camry\",\n};\nvar book = {                   // Book object\n    title: \"The Great Gatsby\",\n    author: \"F. Scott Fitzgerald\",\n};\nvar movie = {                  // Movie object\n    title: \"Inception\",\n    director: \"Christopher Nolan\",\n};\nvar company = {                // Company object\n    name: \"XYZ Corp\",\n    employees: [\"Alice\", \"Bob\", \"Charlie\"],\n};\nvar laptop = {                 // Laptop object\n    brand: \"Dell\",\n    model: \"XPS 13\",\n};\nvar country = {                // Country object\n    name: \"Canada\",\n    population: 38000000,\n};\nvar productCategory = {        // Product category object\n    name: \"Electronics\",\n    description: \"Electronic devices\",\n};\n</pre></code> \n\n<p>2. <strong>Array:</strong><br />\n&nbsp; &nbsp;An array is a specialized object in JavaScript used to store an ordered collection of values. Arrays are indexed by integers, and their elements can be of any data type, including other arrays. They provide various methods for manipulating and iterating over their elements, making them useful for tasks like managing lists of items.</p>\n<pre><code class=\"language-typescript\">var colors = [\"red\", \"green\", \"blue\"];  // Array of colors\nvar numbers = [1, 2, 3, 4, 5];          // Array of numbers\nvar fruits = [\"apple\", \"banana\", \"cherry\"]; // Array of fruits\nvar matrix = [[1, 2], [3, 4]];          // 2D array\nvar names = [\"Alice\", \"Bob\", \"Charlie\"]; // Array of names\nvar cities = [\"New York\", \"London\", \"Paris\"]; // Array of cities\nvar scores = [95, 88, 72, 100, 87];     // Array of test scores\nvar students = [\"Alice\", \"Bob\", \"Charlie\", \"David\"]; // Array of students\nvar prices = [9.99, 19.99, 29.99, 39.99]; // Array of prices\nvar daysOfWeek = [\"Monday\", \"Tuesday\", \"Wednesday\"]; // Array of days\n</pre></code>\n\n<p>3. <strong>Function:</strong><br />\n&nbsp; &nbsp;Functions in JavaScript are first-class objects, meaning they can be assigned to variables, passed as arguments to other functions, and returned as values from functions. Functions are essential for defining reusable blocks of code and implementing logic that can be executed repeatedly.</p>\n <pre><code class=\"language-typescript\">function multiply(a, b) {      // Function to multiply numbers    \n    return a * b;\n}\nfunction greet(name) {        // Function to greet\n    console.log(\"Hello, \" + name + \"!\");\n}\nfunction square(x) {          // Function to square a number\n    return x * x;\n}\nfunction sayHello() {         // Function to say hello\n    console.log(\"Hello!\");\n}\nfunction subtract(a, b) {     // Function to subtract numbers\n    return a - b;\n}\nfunction add(a, b) {          // Function to add numbers\n    return a + b;\n}\nfunction divide(a, b) {       // Function to divide numbers\n    return a / b;\n}\nfunction isEven(num) {        // Function to check if a number is even\n    return num % 2 === 0;\n}\nfunction isPrime(num) {       // Function to check if a number is prime\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    let i = 5;\n    while (i * i <= num) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n        i += 6;\n    }\n    return true;\n}\nfunction capitalize(str) {    // Function to capitalize a string\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n</pre></code>\n\n<p>4. <strong>Date:</strong><br />\n&nbsp; &nbsp;The Date object is used to work with dates and times in JavaScript. It provides methods to create, manipulate, and format dates. Dates are essential for handling time-based operations, scheduling events, and representing timestamps in applications.</p>\n<pre><code class=\"language-typescript\">var currentDate = new Date();     // Current date and time\nvar birthday = new Date(\"1990-05-15\"); // Specific date\nvar futureDate = new Date(\"2023-12-31\"); // Future date\nvar eventDate = new Date(\"2023-09-30\"); // Event date\nvar pastDate = new Date(\"2020-01-01\");  // Past date\nvar anniversary = new Date(\"2000-06-10\"); // Special anniversary\nvar meetingDate = new Date(\"2023-11-15\"); // Meeting date\nvar holiday = new Date(\"2023-12-25\");    // Holiday date\nvar projectDeadline = new Date(\"2023-08-31\"); // Project deadline\nvar vacationStart = new Date(\"2023-07-01\"); // Vacation start date \n</pre></code>\n\n<p>5. <strong>RegExp:</strong><br />\n&nbsp; &nbsp;Regular expressions, often abbreviated as regex or regexp, are objects used for pattern matching within strings. They provide a powerful and flexible way to search for and manipulate text based on specific patterns. Regular expressions are used in tasks like data validation, text parsing, and string manipulation.</p>\n<pre><code class=\"language-typescript\">var regex1 = /pattern/;                   // Regular expression\nvar regex2 = new RegExp(\"pattern\");       // Another regex\nvar emailRegex = /^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/; // Email regex\nvar phoneRegex = /^\\d{10}$/;              // Phone number regex\nvar postalCodeRegex = /^[0-9]{5}(?:-[0-9]{4})?$/; // Postal code regex\nvar urlRegex = /^(http|https):\/\/\\w+\\.\\w+/; // URL regex\nvar dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;    // Date format regex\nvar timeRegex = /^([01]\\d|2[0-3]):[0-5]\\d$/; // Time format regex\nvar currencyRegex = /^\\d+(\\.\\d{1,2})?$/;   // Currency format regex\nvar usernameRegex = /^[a-zA-Z0-9_-]+$/;    // Username format regex\n</pre></code>\n\n<p>6. <strong>Custom Objects:</strong><br />\n&nbsp; &nbsp;Custom objects are user-defined objects created by defining constructor functions or using class syntax (introduced in ES6). These objects can have their own properties and methods, allowing developers to model specific data structures and encapsulate behavior relevant to their applications. Custom objects are the foundation for building custom data models in JavaScript.</p><pre><code class=\"language-typescript\">function Product(name, price) {  // Product constructor    \n    this.name = name;\n    this.price = price;\n}\n\nvar product1 = new Product(\"Shoes\", 49.99); // Product instance\nvar product2 = new Product(\"Phone\", 599.99); // Another product\n\nfunction Person(firstName, lastName) { // Person constructor\n    this.firstName = firstName;\n    this.lastName = lastName;\n}\n\nvar person1 = new Person(\"John\", \"Doe\"); // Person instance\nvar person2 = new Person(\"Alice\", \"Smith\"); // Another person\n\nfunction Animal(type, legs) {       // Animal constructor\n    this.type = type;\n    this.legs = legs;\n}\n\nvar cat = new Animal(\"Cat\", 4);      // Cat instance\nvar dog = new Animal(\"Dog\", 4);      // Dog instance\n\nfunction Company(name, employees) {  // Company constructor\n    this.name = name;\n    this.employees = employees;\n}\n\nvar company1 = new Company(\"ABC Inc.\", [\"Alice\", \"Bob\"]); // Company instance\nvar company2 = new Company(\"XYZ Corp.\", [\"Charlie\", \"David\"]); // Another company\n</pre></code>\n\n<p>These definitions provide an overview of the different data types in JavaScript, both primitive and non-primitive, and their roles within the language. Understanding these data types is fundamental to effective JavaScript programming.</p>\n"
        },
        {
          "name": "Operators"
        },
        {
          "name": "Functions"
        },
        {
          "name": "Arrays Mathod"
        },
        {
          "name": "Objects Mathod"
        },
        {
          "name": "Strings Mathod"
        }
      ],
      "right": [
        {
          "name": "Control Flow"
        },
        {
          "name": "Error Handling"
        },
        {
          "name": "DOM Manipulation"
        },
        {
          "name": "Asynchronous Programming"
        },
        {
          "name": "JSON"
        },
        {
          "name": "Modules"
        }
      ]
    },
    {
      "title": "TypeScript Basic",
      "left": [
        {
          "name": "Type Annotations and Type Inference"
        },
        {
          "name": "Interfaces"
        },
        {
          "name": "Classes and Objects"
        },
        {
          "name": "Arrays and Tuples"
        },
        {
          "name": "Union and Intersection Types"
        }
      ],
      "right": [
        {
          "name": "Enums"
        },
        {
          "name": "Type Assertion"
        },
        {
          "name": "Generics"
        },
        {
          "name": "Modules"
        },
        {
          "name": "Type Inference and Type Compatibility"
        },
        {
          "name": "TypeScript Compiler"
        },
        {
          "name": "Data Types"
        }
      ]
    },
    {
      "title": "Angular CLI",
      "left": [
        {
          "name": "Creating a new Angular project"
        },
        {
          "name": "Generating Components, services, modules, pipes, etc."
        }
      ],
      "right": [
        {
          "name": "Development server and live reloading"
        },
        {
          "name": "Production builds and optimizations"
        }
      ]
    },
    {
      "title": "Module",
      "left": [
        {
          "name": "NgModule Decorator"
        },
        {
          "name": "Imports"
        },
        {
          "name": "Declarations"
        },
        {
          "name": "Exports"
        }
      ],
      "right": [
        {
          "name": "Providers"
        },
        {
          "name": "Bootstrap"
        },
        {
          "name": "Lazy Loading"
        }
      ]
    },
    {
      "title": "Components",
      "left": [
        {
          "name": "Component Class"
        },
        {
          "name": "Template"
        },
        {
          "name": "Component Metadata"
        },
        {
          "name": "Lifecycle Hooks"
        }
      ],
      "right": [
        {
          "name": "Component Communication"
        },
        {
          "name": "Component Styling"
        },
        {
          "name": "Component Interaction"
        },
        {
          "name": "Component Routing"
        }
      ]
    },
    {
      "title": "Directives",
      "left": [
        {
          "name": "Component Directives"
        },
        {
          "name": "Attribute Directives"
        }
      ],
      "right": [
        {
          "name": "Structural Directives"
        }
      ]
    },
    {
      "title": "Data Binding",
      "left": [
        {
          "name": "Interpolation"
        },
        {
          "name": "Property Binding"
        }
      ],
      "right": [
        {
          "name": "Event Binding"
        },
        {
          "name": "Two-Way Binding"
        }
      ]
    },
    {
      "title": "Forms",
      "left": [
        {
          "name": "Template-driven Forms"
        },
        {
          "name": "Reactive Forms"
        },
        {
          "name": "FormControl"
        },
        {
          "name": "FormGroup"
        },
        {
          "name": "FormArray"
        }
      ],
      "right": [
        {
          "name": "Form Submission"
        },
        {
          "name": "Dynamic Form Control Manipulation"
        },
        {
          "name": "Form Validation"
        },
        {
          "name": "Form Builder"
        }
      ]
    },
    {
      "title": "Dependency Injection",
      "left": [
        {
          "name": "Service Registration"
        },
        {
          "name": "Injector"
        },
        {
          "name": "Dependency Injection in Components"
        }
      ],
      "right": [
        {
          "name": "Injecting Dependencies into Services"
        },
        {
          "name": "Provider Configuration"
        },
        {
          "name": "Injection Tokens"
        }
      ]
    },
    {
      "title": "Services",
      "left": [
        {
          "name": "Creating a Service"
        },
        {
          "name": "Injecting a Service"
        },
        {
          "name": "Singleton Scope"
        }
      ],
      "right": [
        {
          "name": "Providing Services"
        },
        {
          "name": "Service Dependencies"
        }
      ]
    },
    {
      "title": "Routing",
      "left": [
        {
          "name": "Router Module Setup"
        },
        {
          "name": "Router Outlet"
        },
        {
          "name": "Route Configuration"
        },
        {
          "name": "Traditional Routing"
        },
        {
          "name": "Path-based Routing"
        }
      ],
      "right": [
        {
          "name": "Lazy Loading"
        },
        {
          "name": "Navigation"
        },
        {
          "name": "Route Parameters"
        },
        {
          "name": "Nested Routes"
        },
        {
          "name": "Route Guards"
        }
      ]
    },
    {
      "title": "State Management",
      "left": [
        {
          "name": "Component Input/Output"
        },
        {
          "name": "Services"
        },
        {
          "name": "RxJS and Observables"
        }
      ],
      "right": [
        {
          "name": "NgRx"
        },
        {
          "name": "Other State Management Libraries"
        }
      ]
    },
    {
      "title": "RxJs",
      "left": [
        {
          "name": "Observables"
        },
        {
          "name": "Interval"
        },
        {
          "name": "Timer"
        },
        {
          "name": "From"
        },
        {
          "name": "Of"
        },
        {
          "name": "FromEvent"
        },
        {
          "name": "Ajax"
        },
        {
          "name": "Empty"
        },
        {
          "name": "Never"
        },
        {
          "name": "Throw"
        },
        {
          "name": "Operators"
        },
        {
          "name": "Subscription Management"
        },
        {
          "name": "Subjects"
        },
        {
          "name": "BehaviorSubject"
        },
        {
          "name": "ReplaySubject"
        },
        {
          "name": "AsyncSubject"
        },
        {
          "name": "Schedulers"
        },
        {
          "name": "Error Handling"
        }
      ],
      "right": [
        {
          "name": "Hot vs Cold Observables"
        },
        {
          "name": "Higher-Order Observables"
        },
        {
          "name": "Async Pipe"
        },
        {
          "name": "Handling Multiple Streams"
        },
        {
          "name": "Caching and Memoization"
        },
        {
          "name": "Testing"
        },
        {
          "name": "Backpressure"
        },
        {
          "name": "Custom Operators"
        },
        {
          "name": "Time-based Operators"
        },
        {
          "name": "Multicasting and Connectable Observables"
        },
        {
          "name": "Customizing Observable Creation"
        },
        {
          "name": "Immutable Data Handling"
        },
        {
          "name": "Advanced Error Handling Techniques"
        }
      ]
    },
    {
      "title": "HTTP and APIs",
      "left": [
        {
          "name": "Importing HttpClient"
        },
        {
          "name": "HTTP Methods"
        },
        {
          "name": "Making HTTP Requests"
        },
        {
          "name": "Handling Responses"
        },
        {
          "name": "Response Types"
        }
      ],
      "right": [
        {
          "name": "Headers and Query Parameters"
        },
        {
          "name": "Error Handling"
        },
        {
          "name": "Authentication"
        },
        {
          "name": "Interceptors"
        },
        {
          "name": "Mocking HTTP Requests"
        }
      ]
    },
    {
      "title": "(i18n) and Localization",
      "left": [
        {
          "name": "Internationalization (i18n)"
        },
        {
          "name": "Translation Files"
        },
        {
          "name": "Markup Translation"
        },
        {
          "name": "Translation Process"
        }
      ],
      "right": [
        {
          "name": "Localization Configuration"
        },
        {
          "name": "Dynamic Localization"
        },
        {
          "name": "TranslateService"
        },
        {
          "name": "Language Switching"
        },
        {
          "name": "Pluralization and Selectors"
        }
      ]
    },
    {
      "title": "SSR (Angular Universal)",
      "left": [
        {
          "name": "Server-Side Rendering (SSR)"
        },
        {
          "name": "Angular Universal"
        },
        {
          "name": "Prerequisites"
        },
        {
          "name": "Setup and Configuration"
        },
        {
          "name": "Rendering Process"
        }
      ],
      "right": [
        {
          "name": "Data Transfer"
        },
        {
          "name": "Lifecycle Hooks"
        },
        {
          "name": "Deployment"
        },
        {
          "name": "Angular Universal with Angular CLI"
        }
      ]
    },
    {
      "title": "Testing",
      "left": [
        {
          "name": "Testing Frameworks"
        },
        {
          "name": "Test Bed"
        },
        {
          "name": "Unit Testing"
        },
        {
          "name": "Component Testing"
        },
        {
          "name": "Mocking Dependencies"
        }
      ],
      "right": [
        {
          "name": "Integration Testing"
        },
        {
          "name": "Mocking HTTP Requests"
        },
        {
          "name": "E2E Testing"
        },
        {
          "name": "Test Coverage"
        },
        {
          "name": "Continuous Integration"
        }
      ]
    },
    {
      "title": "Performance Optimization",
      "left": [
        {
          "name": "Change Detection Optimization"
        },
        {
          "name": "Lazy Loading"
        },
        {
          "name": "AOT Compilation"
        },
        {
          "name": "Code Minification and Bundling"
        },
        {
          "name": "Optimizing Images"
        }
      ],
      "right": [
        {
          "name": "Caching and HTTP Optimization"
        },
        {
          "name": "Performance Profiling"
        },
        {
          "name": "Optimizing Angular Router"
        },
        {
          "name": "Memory Management"
        },
        {
          "name": "Third-Party Libraries"
        }
      ]
    },
    {
      "title": "Deployment",
      "left": [
        {
          "name": "Build the Application"
        },
        {
          "name": "Choose a Hosting Environment"
        },
        {
          "name": "Server Configuration"
        },
        {
          "name": "Static File Deployment"
        }
      ],
      "right": [
        {
          "name": "Domain and DNS Configuration"
        },
        {
          "name": "HTTPS and SSL Certificates"
        },
        {
          "name": "Continuous Integration and Deployment (CI/CD)"
        },
        {
          "name": "Testing and Verification"
        },
        {
          "name": "Monitoring and Maintenance"
        }
      ]
    },
    {
      "title": "Angular Material",
      "left": [
        {
          "name": "Installation"
        },
        {
          "name": "Component Library"
        },
        {
          "name": "Theming"
        },
        {
          "name": "Responsive Design"
        },
        {
          "name": "Accessibility"
        },
        {
          "name": "Form Controls"
        }
      ],
      "right": [
        {
          "name": "Data Tables"
        },
        {
          "name": "Dialogs and Modals"
        },
        {
          "name": "Snackbar and Toast"
        },
        {
          "name": "Iconography"
        },
        {
          "name": "Internationalization (i18n)"
        },
        {
          "name": "Integration with Angular CDK"
        }
      ]
    },
    {
      "title": "Angular Animation",
      "left": [
        {
          "name": "Animation Module"
        },
        {
          "name": "Animation Trigger"
        },
        {
          "name": "States and Transitions"
        },
        {
          "name": "Keyframes and Styles"
        },
        {
          "name": "Animation Functions"
        }
      ],
      "right": [
        {
          "name": "Triggering Animations"
        },
        {
          "name": "Animation Metadata"
        },
        {
          "name": "Grouping and Sequencing"
        },
        {
          "name": "Dynamic Animations"
        },
        {
          "name": "Integration with Angular Directives"
        }
      ]
    }
  ]
}