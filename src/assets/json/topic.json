{
  "topicsArr": [
    {
      "title": "Introduction to Angular",
      "left": [
        {
          "name": "What is Angular?",
          "discription": "<p>Angular is a comprehensive, <strong>open-source JavaScript framework </strong>for building <strong>dynamic web applications</strong>. Developed and <strong>maintained by Google</strong>, Angular is a popular choice among web developers due to its robust features, <strong>modular architecture</strong>, and <strong>extensive tooling</strong>. It allows developers to create <strong>single-page applications (SPAs)</strong> and complex <strong>web applications</strong> with ease.</p>\n\n<p>Here&#39;s a detailed explanation of Angular&#39;s key features and components:</p>\n\n<p>1. <strong>Component-Based Architecture:</strong>&nbsp;Angular follows a component-based architecture, where the application is broken down into reusable and self-contained building blocks called components. Each component represents a specific part of the user interface and encapsulates its logic, styles, and templates.</p>\n<p><pre><code class=\"language-typescript\">@Component({\n  selector: 'app-example',\n  templateUrl: './example.component.html',\n  styleUrls: ['./example.component.css']\n})\nexport class ExampleComponent { }\n</code></pre></p>\n\n<p>2. <strong>Templates:</strong>&nbsp;Angular uses HTML templates with added syntax, such as directives and data binding, to define the user interface of an application. These templates are dynamic, allowing developers to bind data to the view and update it automatically as data changes.</p>\n<p><pre><code class=\"language-markup\">&lt;div&gt\n  {{ dataBindingVariable }}\n  &lt;button (click)=\"onButtonClick()\"&gt;Click Me&lt;/button&gt;\n&lt;/div&gt;\n</code></pre></p>\n\n<p>3. <strong>Data Binding:</strong> Angular provides two-way data binding, allowing data to flow seamlessly between the view and the component. This means that changes in the UI are reflected in the underlying data, and vice versa, without the need for manual synchronization.</p>\n<pre><code class=\"language-markup\">&lt;input [(ngModel)]=\"dataBindingVariable\"&gt;\n</code></pre>\n<p>4. <strong>Dependency Injection:&nbsp;</strong>Angular&#39;s dependency injection system helps manage the dependencies between different parts of an application. It promotes the use of reusable and testable components by providing a way to inject services or dependencies into components.</p>\n<pre><code class=\"language-typescript\">constructor(private exampleService: ExampleService) { }\n</code></pre>\n<p>5. <strong>Directives:</strong> Directives are special markers in the DOM that tell Angular to attach behavior or modify the DOM elements. Angular comes with built-in directives like ngIf, ngFor, and ngStyle, and you can create custom directives as well.</p>\n<pre><code class=\"language-markup\">&lt;div *ngIf=\"isVisible\"&gt;This is visible.&lt;/div&gt;\n</code></pre>\n<p>6. <strong>Services:&nbsp;</strong>Services are singleton objects that are responsible for performing specific tasks or providing data to components. They are a crucial part of Angular for sharing data, handling HTTP requests, and encapsulating application logic.</p>\n<pre><code class=\"language-typescript\">@Injectable({\n  providedIn: 'root',\n})\nexport class ExampleService { }\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExampleService { }\n</code></pre>\n<p>7. <strong>Routing:&nbsp;</strong>Angular&#39;s router module allows developers to create client-side navigation and manage application URLs. It enables the development of multi-page-like applications within a single-page application.</p>\n<pre><code class=\"language-typescript\">const routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'about', component: AboutComponent },\n];\nconst routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'about', component: AboutComponent },\n];\n</code></pre>\n<p>8. <strong>HTTP Client:</strong>&nbsp;Angular provides an HTTP client module for making HTTP requests to external APIs or backend services. It simplifies handling RESTful API calls and supports various request methods like GET, POST, PUT, and DELETE.</p>\n<pre><code class=\"language-typescript\">httpClient.get('/api/data').subscribe((data) => {\n  // Handle data here\n});\nhttpClient.get('/api/data').subscribe((data) => {\n  // Handle data here\n});\n</code></pre>\n<p>9. <strong>Forms:</strong>&nbsp;Angular offers robust support for building both template-driven forms and reactive forms. These forms provide extensive validation, error handling, and form data management capabilities.</p>\n<pre><code class=\"language-markup\">&lt;form (submit)=\"onFormSubmit()\"&gt;\n  &lt;input [(ngModel)]=\"formData\"&gt;\n&lt;/form&gt;\n&lt;form (submit)=\"onFormSubmit()\"&gt;\n  &lt;input [(ngModel)]=\"formData\"&gt;\n&lt;/form&gt;\n</code></pre>\n<p>10. <strong>Testing:</strong>&nbsp;Angular is designed with testability in mind. It provides tools and utilities for writing unit tests, integration tests, and end-to-end tests using frameworks like Jasmine and Protractor.</p>\n<pre><code class=\"language-typescript\">it('should create the app', () => {\n  const fixture = TestBed.createComponent(AppComponent);\n  const app = fixture.componentInstance;\n  expect(app).toBeTruthy();\n});\nit('should create the app', () => {\n  const fixture = TestBed.createComponent(AppComponent);\n  const app = fixture.componentInstance;\n  expect(app).toBeTruthy();\n});\n</code></pre>\n<p>11. <strong>CLI (Command Line Interface):</strong>&nbsp;Angular CLI is a powerful command-line tool that simplifies the creation, development, and deployment of Angular applications. It generates project scaffolding, automates common development tasks, and optimizes production builds.</p>\n<pre><code class=\"language-typescript\">ng new my-app\nng generate component my-component\nng build --prod\n</code></pre>\n<p>12. <strong>Cross-Platform Development:</strong>&nbsp;With technologies like Angular Universal (for server-side rendering) and Angular for mobile (using frameworks like Ionic), you can extend your Angular application to target various platforms, including web, mobile, and desktop.</p>\n\n<ul>\n\t<li>Angular Universal for server-side rendering.</li>\n\t<li>Ionic for mobile and desktop applications.</li>\n</ul>\n\n<p>Angular has a steep learning curve due to its comprehensive feature set, but it offers a robust and organized way to build large-scale web applications. It is backed by a vibrant community and has a rich ecosystem of libraries and extensions, making it a popular choice for modern web development.</p>\n"
        }
      ],
      "right": [
        {
          "name": "Advantages and key features of Angular",
          "discription": "<p>Angular is a comprehensive, open-source JavaScript framework for building dynamic web applications. Developed and maintained by Google, Angular is a popular choice among web developers due to its robust features, modular architecture, and extensive tooling. It allows developers to create single-page applications (SPAs) and complex web applications with ease.</p>\n\n<p>Here&#39;s a detailed explanation of Angular&#39;s key features and components:</p>\n\n<p>1. <strong>Modular Development</strong>: Angular applications are organized into modules. A module is a logical grouping of components, services, and other features. Modules help in organizing and separating concerns within an application, making it more modular and maintainable. Angular encourages a modular approach to application development, which involves breaking down your application into smaller, self-contained modules. These modules serve as building blocks, enhancing code maintainability and reusability. By creating modular components, you can manage the complexity of your application more effectively and encourage a structured development process. Here&#39;s an example of defining an Angular module:</p>\n\n<p><pre><code class=\"language-typescript\">@NgModule({\n     declarations: [AppComponent, HeaderComponent, FooterComponent],\n     imports: [CommonModule, FormsModule],\n     providers: [DataService],\n   })\nexport class AppModule {}\n</code></pre></p>\n\n<p>2. <strong>Two-Way Data Binding:&nbsp;</strong>Angular&#39;s two-way data binding simplifies the synchronization of data between the model (component) and the view (template). This bi-directional data flow reduces the need for manual DOM manipulation and enhances code readability. It ensures that changes in one part of the application automatically propagate to the other. Here&#39;s an example of two-way data binding in an input field:</p>\n\n<p><pre><code class=\"language-markup\">&lt;input [(ngModel)]=\"name\"&gt;\n&lt;p&gt;Hello, {{ name }}!&lt;/p&gt;\n</code></pre></p>\n\n<p>3. <strong>Component-Based Architecture:</strong>&nbsp;Angular revolves around a component-based architecture, where applications are built using self-contained and reusable components. Each component encapsulates its logic, styles, and templates, promoting code separation and maintainability. Here&#39;s a snippet illustrating the creation of an Angular component:</p>\n\n<p><pre><code class=\"language-typescript\">@Component({\n     selector: 'app-example',\n     templateUrl: './example.component.html',\n     styleUrls: ['./example.component.css']\n   })\nexport class ExampleComponent { }\n</code></pre></p>\n\n<p>4. <strong>Dependency Injection:</strong>&nbsp;Angular&#39;s dependency injection system simplifies the management of dependencies between components and services. It encourages modularity and testability by allowing you to inject services or dependencies into components. This promotes clean code organization. Below is an example of injecting a service in Angular:</p>\n\n<p><pre><code class=\"language-typescript\">constructor(private dataService: DataService) { }\n</code></pre></p>\n\n<p>5. <strong>TypeScript:</strong>&nbsp;Angular is written in TypeScript, a statically typed superset of JavaScript. TypeScript provides strong type checking and improved tooling support, reducing the chances of runtime errors and improving code quality. Here&#39;s an example of using TypeScript in Angular:</p>\n\n<p><pre><code class=\"language-typescript\">class AppComponent {\n     message: string = 'Hello, TypeScript!';\n}\n</code></pre></p>\n\n<p>6. <strong>Rich Templating:</strong>&nbsp;Angular&#39;s HTML templates support a wide range of features, including directives, data binding, and custom templates. This allows for the creation of dynamic and responsive user interfaces with minimal code. A simple template with data binding might look like this:</p>\n\n<p><pre><code class=\"language-markup\">&lt;p&gt;{{ dynamicData }}&lt;/p&gt;\n</code></pre></p>\n\n<p>7. <strong>Directives:</strong>&nbsp;Angular includes built-in directives like `ngIf`, `ngFor`, and `ngSwitch` for manipulating the DOM and controlling the rendering of elements based on conditions. You can also create custom directives to extend functionality. Here&#39;s an example using the `ngIf` structural directive:</p>\n\n<p><pre><code class=\"language-markup\">&lt;div *ngIf=\"isVisible\"&gt;This is visible.&lt;/div&gt;\n</code></pre></p>\n\n<p>8. <strong>Cross-Platform Development:</strong> Angular supports cross-platform development with technologies like Angular Universal for server-side rendering and platforms like Ionic for mobile and desktop. You can create an Ionic Angular app with the following command:</p>\n\n<p><pre><code class=\"language-typescript\">ionic start my-app blank --type=angular\n</code></pre></p>\n\n<p>9. <strong>Powerful Forms:</strong>&nbsp;Angular provides robust support for building forms, including template-driven forms and reactive forms. These forms offer features like validation, custom validators, and form data management. Here&#39;s an example of creating a reactive form:</p>\n\n<p><pre><code class=\"language-markup\">&lt;form [formGroup]=\"myForm\" (ngSubmit)=\"onSubmit()\"&gt;\n  &lt;input formControlName=\"name\"&gt;\n  &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre></p>\n\n<p>10. <strong>Router:</strong>&nbsp;Angular&#39;s router module allows developers to create complex client-side navigation, enabling the development of multi-page-like applications within a single-page application. You can configure routes like this:</p>\n\n<p><pre><code class=\"language-typescript\">const routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'about', component: AboutComponent },\n];\n</code></pre></p>\n\n<p>11. <strong>HTTP Client: </strong>Angular&#39;s HTTP client simplifies making HTTP requests to external APIs or backend services. It supports various request methods, interceptors, and error handling. Here&#39;s an example of making an HTTP GET request:</p>\n\n<p><pre><code class=\"language-typescript\">httpClient.get('/api/data').subscribe((data) => {\n  // Handle data here\n});\n</code></pre></p>\n\n<p>12. <strong>Testing:</strong> Angular is designed with testability in mind. It provides tools and utilities for writing unit tests, integration tests, and end-to-end tests using frameworks like Jasmine, Protractor, and Karma. An example of writing a Jasmine unit test:</p>\n\n<p><pre><code class=\"language-typescript\">it('should create the app', () => {\n  const fixture = TestBed.createComponent(AppComponent);\n  const app = fixture.componentInstance;\n  expect(app).toBeTruthy();\n});\n</code></pre></p>\n\n<p>13. <strong>Angular CLI:</strong>&nbsp;The Angular CLI is a powerful command-line tool that automates common development tasks, such as project setup, code generation, and building for production. It enforces best practices and maintains project consistency. You can create a new Angular app with the CLI using:</p>\n\n<p><pre><code class=\"language-typescript\">ng new my-app\n</code></pre></p>\n\n<p>14. <strong>Internationalization (i18n):&nbsp;</strong>Angular provides tools for internationalization and localization, making it easier to create applications that can be used in different languages and regions. You can use Angular&#39;s i18n features for translation, like this:</p>\n\n<p><pre><code class=\"language-markup\">&lt;p i18n&gt;Hello, World!&lt;/p&gt;\n</code></pre></p>\n\n<p>15. <strong>MVC Architecture:</strong>&nbsp;Angular follows the Model-View-Controller (MVC) architectural pattern. In this pattern, the Model represents the application&#39;s data and business logic, the View handles the presentation and user interface, and the Controller (or in Angular&#39;s case, the Component) acts as an intermediary that connects the Model and View.<br />\n<pre><code class=\"language-typescript\">// Component (Controller)\nexport class AppComponent {\n  // Model\n  data: string = 'Hello, MVC!';\n}\n</code></pre></p>\n\n<p>16. <strong>Lifecycle Hooks:</strong> Angular components have a lifecycle, and developers can tap into various lifecycle events to perform tasks at specific points in a component&#39;s life, such as initialization, content rendering, and destruction. Some common lifecycle hooks include `ngOnInit`, `ngOnDestroy`, and `ngOnChanges`.<br />\n<pre><code class=\"language-typescript\">// Lifecycle hook example\nexport class MyComponent implements OnInit, OnDestroy {\n  ngOnInit() {\n    // Initialization code\n  }\n\n  ngOnDestroy() {\n    // Cleanup code\n  }\n}\n</code></pre></p>\n\n<p>17. <strong>Observables and RxJS:&nbsp;</strong>Angular leverages Reactive Extensions for JavaScript (RxJS) to handle asynchronous operations and manage data streams. Observables are a key part of Angular&#39;s reactive programming approach, enabling developers to work with asynchronous data in a more structured and efficient manner.<br />\n<pre><code class=\"language-typescript\">// Using RxJS Observables\nimport { Observable } from 'rxjs';\n\nconst observable = new Observable<number>((observer) => {\n  observer.next(1);\n  observer.next(2);\n  observer.complete();\n});\n\nobservable.subscribe((value) => {\n  console.log(value);\n});\n</code></pre></p>\n\n<p>18.<strong> Angular Material:&nbsp;</strong>Angular Material is a popular UI component library for Angular applications. It offers a wide range of pre-designed, customizable UI components like buttons, forms, navigation menus, and dialogs, helping developers create visually appealing and responsive user interfaces.<br />\n<pre><code class=\"language-typescript\"># Install Angular Material\nng add @angular/material\n</code></pre></p>\n\n<p>19. <strong>Lazy Loading:</strong>&nbsp;Angular allows you to load modules and their associated components only when needed, improving application performance. This feature is particularly useful for large applications with many features, as it reduces the initial load time.<br />\n<pre><code class=\"language-typescript\">// Lazy loading configuration\nconst routes: Routes = [\n  { path: 'dashboard', loadChildren: () => import('./dashboard.module').then(m => m.DashboardModule) },\n];\n</code></pre></p>\n\n<p>20. <strong>Change Detection:</strong>&nbsp;Angular has a built-in change detection mechanism that automatically updates the view when the underlying data changes. Developers can control and optimize change detection strategies to improve application performance.<br />\n<pre><code class=\"language-typescript\">// Change detection example\nimport { ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // ...\n})\n</code></pre></p>\n\n<p>21. <strong>Decorators:</strong>&nbsp;Decorators are a TypeScript feature used extensively in Angular. They provide metadata that Angular uses to understand and configure various parts of your application. Common decorators include `@Component`, `@NgModule`, and `@Injectable`.<br />\n<pre><code class=\"language-typescript\">// Using decorators \n@Component({ \n   selector: 'app-example',\n   templateUrl: './example.component.html',\n   styleUrls: ['./example.component.css'] \n  }) \nexport class ExampleComponent { }\n</code></pre></p>\n\n<p>22. <strong>Security:</strong>&nbsp;Angular includes built-in security mechanisms to protect against common web vulnerabilities, such as Cross-Site Scripting (XSS) and Cross-Site Request Forgery (CSRF). It also promotes best practices for handling authentication and authorization securely. Implementing secure authentication and authorization is a critical aspect of Angular applications.</p>\n\n<p>23. <strong>State Management:</strong> While Angular itself doesn&#39;t prescribe a specific state management library, developers can choose from various state management solutions, such as NgRx (inspired by Redux), to manage complex application state.</p>\n\n<p>24.<strong> Community and Ecosystem:&nbsp;</strong>Angular benefits from a large and active community of developers, which means access to a wealth of resources, libraries, plugins, and community-contributed solutions. It also receives regular updates and improvements from Google.</p>\n\n<p>25. <strong>Performance Optimization:&nbsp;</strong>Angular provides tools and best practices for optimizing application performance, including Ahead-of-Time (AOT) compilation, lazy loading, tree shaking, and code splitting.</p>\n\n<p>These detailed explanations, along with code snapshots, provide a comprehensive understanding of each core concept and feature of Angular.</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n"
        }
      ]
    },
    {
      "title": "JavaScript Basic",
      "left": [
        {
          "name": "Variables and Data Types",
          "discription":"<pre><code class=\"language-typescript\">\n@Component({\n  selector: 'app-example',\n  templateUrl: './example.component.html',\n  styleUrls: ['./example.component.css']\n})\nexport class ExampleComponent { }\n\n@Component({\n  selector: 'app-example',\n  templateUrl: './example.component.html',\n  styleUrls: ['./example.component.css']\n})\nexport class ExampleComponent { }\n</code></pre>"
        },
        {
          "name": "Operators"
        },
        {
          "name": "Functions"
        },
        {
          "name": "Arrays Mathod"
        },
        {
          "name": "Objects Mathod"
        },
        {
          "name": "Strings Mathod"
        }
      ],
      "right": [
        {
          "name": "Control Flow"
        },
        {
          "name": "Error Handling"
        },
        {
          "name": "DOM Manipulation"
        },
        {
          "name": "Asynchronous Programming"
        },
        {
          "name": "JSON"
        },
        {
          "name": "Modules"
        }
      ]
    },
    {
      "title": "JavaScript",
      "left": [
        {
          "name": "Variables"
        },
        {
          "name": "Operators"
        },
        {
          "name": "Functions"
        },
        {
          "name": "Arrays"
        },
        {
          "name": "Objects"
        },
        {
          "name": "Strings"
        }
      ],
      "right": [
        {
          "name": "Control Flow"
        },
        {
          "name": "Error Handling"
        },
        {
          "name": "DOM Manipulation"
        },
        {
          "name": "Asynchronous Programming"
        },
        {
          "name": "JSON"
        },
        {
          "name": "Modules"
        }
      ]
    },
    {
      "title": "TypeScript Basic",
      "left": [
        {
          "name": "Type Annotations and Type Inference"
        },
        {
          "name": "Interfaces"
        },
        {
          "name": "Classes and Objects"
        },
        {
          "name": "Arrays and Tuples"
        },
        {
          "name": "Union and Intersection Types"
        }
      ],
      "right": [
        {
          "name": "Enums"
        },
        {
          "name": "Type Assertion"
        },
        {
          "name": "Generics"
        },
        {
          "name": "Modules"
        },
        {
          "name": "Type Inference and Type Compatibility"
        },
        {
          "name": "TypeScript Compiler"
        },
        {
          "name": "Data Types"
        }
      ]
    },
    {
      "title": "Angular CLI",
      "left": [
        {
          "name": "Creating a new Angular project"
        },
        {
          "name": "Generating Components, services, modules, pipes, etc."
        }
      ],
      "right": [
        {
          "name": "Development server and live reloading"
        },
        {
          "name": "Production builds and optimizations"
        }
      ]
    },
    {
      "title": "Module",
      "left": [
        {
          "name": "NgModule Decorator"
        },
        {
          "name": "Imports"
        },
        {
          "name": "Declarations"
        },
        {
          "name": "Exports"
        }
      ],
      "right": [
        {
          "name": "Providers"
        },
        {
          "name": "Bootstrap"
        },
        {
          "name": "Lazy Loading"
        }
      ]
    },
    {
      "title": "Components",
      "left": [
        {
          "name": "Component Class"
        },
        {
          "name": "Template"
        },
        {
          "name": "Component Metadata"
        },
        {
          "name": "Lifecycle Hooks"
        }
      ],
      "right": [
        {
          "name": "Component Communication"
        },
        {
          "name": "Component Styling"
        },
        {
          "name": "Component Interaction"
        },
        {
          "name": "Component Routing"
        }
      ]
    },
    {
      "title": "Directives",
      "left": [
        {
          "name": "Component Directives"
        },
        {
          "name": "Attribute Directives"
        }
      ],
      "right": [
        {
          "name": "Structural Directives"
        }
      ]
    },
    {
      "title": "Data Binding",
      "left": [
        {
          "name": "Interpolation"
        },
        {
          "name": "Property Binding"
        }
      ],
      "right": [
        {
          "name": "Event Binding"
        },
        {
          "name": "Two-Way Binding"
        }
      ]
    },
    {
      "title": "Forms",
      "left": [
        {
          "name": "Template-driven Forms"
        },
        {
          "name": "Reactive Forms"
        },
        {
          "name": "FormControl"
        },
        {
          "name": "FormGroup"
        },
        {
          "name": "FormArray"
        }
      ],
      "right": [
        {
          "name": "Form Submission"
        },
        {
          "name": "Dynamic Form Control Manipulation"
        },
        {
          "name": "Form Validation"
        },
        {
          "name": "Form Builder"
        }
      ]
    },
    {
      "title": "Dependency Injection",
      "left": [
        {
          "name": "Service Registration"
        },
        {
          "name": "Injector"
        },
        {
          "name": "Dependency Injection in Components"
        }
      ],
      "right": [
        {
          "name": "Injecting Dependencies into Services"
        },
        {
          "name": "Provider Configuration"
        },
        {
          "name": "Injection Tokens"
        }
      ]
    },
    {
      "title": "Services",
      "left": [
        {
          "name": "Creating a Service"
        },
        {
          "name": "Injecting a Service"
        },
        {
          "name": "Singleton Scope"
        }
      ],
      "right": [
        {
          "name": "Providing Services"
        },
        {
          "name": "Service Dependencies"
        }
      ]
    },
    {
      "title": "Routing",
      "left": [
        {
          "name": "Router Module Setup"
        },
        {
          "name": "Router Outlet"
        },
        {
          "name": "Route Configuration"
        },
        {
          "name": "Traditional Routing"
        },
        {
          "name": "Path-based Routing"
        }
      ],
      "right": [
        {
          "name": "Lazy Loading"
        },
        {
          "name": "Navigation"
        },
        {
          "name": "Route Parameters"
        },
        {
          "name": "Nested Routes"
        },
        {
          "name": "Route Guards"
        }
      ]
    },
    {
      "title": "State Management",
      "left": [
        {
          "name": "Component Input/Output"
        },
        {
          "name": "Services"
        },
        {
          "name": "RxJS and Observables"
        }
      ],
      "right": [
        {
          "name": "NgRx"
        },
        {
          "name": "Other State Management Libraries"
        }
      ]
    },
    {
      "title": "RxJs",
      "left": [
        {
          "name": "Observables"
        },
        {
          "name": "Interval"
        },
        {
          "name": "Timer"
        },
        {
          "name": "From"
        },
        {
          "name": "Of"
        },
        {
          "name": "FromEvent"
        },
        {
          "name": "Ajax"
        },
        {
          "name": "Empty"
        },
        {
          "name": "Never"
        },
        {
          "name": "Throw"
        },
        {
          "name": "Operators"
        },
        {
          "name": "Subscription Management"
        },
        {
          "name": "Subjects"
        },
        {
          "name": "BehaviorSubject"
        },
        {
          "name": "ReplaySubject"
        },
        {
          "name": "AsyncSubject"
        },
        {
          "name": "Schedulers"
        },
        {
          "name": "Error Handling"
        }
      ],
      "right": [
        {
          "name": "Hot vs Cold Observables"
        },
        {
          "name": "Higher-Order Observables"
        },
        {
          "name": "Async Pipe"
        },
        {
          "name": "Handling Multiple Streams"
        },
        {
          "name": "Caching and Memoization"
        },
        {
          "name": "Testing"
        },
        {
          "name": "Backpressure"
        },
        {
          "name": "Custom Operators"
        },
        {
          "name": "Time-based Operators"
        },
        {
          "name": "Multicasting and Connectable Observables"
        },
        {
          "name": "Customizing Observable Creation"
        },
        {
          "name": "Immutable Data Handling"
        },
        {
          "name": "Advanced Error Handling Techniques"
        }
      ]
    },
    {
      "title": "HTTP and APIs",
      "left": [
        {
          "name": "Importing HttpClient"
        },
        {
          "name": "HTTP Methods"
        },
        {
          "name": "Making HTTP Requests"
        },
        {
          "name": "Handling Responses"
        },
        {
          "name": "Response Types"
        }
      ],
      "right": [
        {
          "name": "Headers and Query Parameters"
        },
        {
          "name": "Error Handling"
        },
        {
          "name": "Authentication"
        },
        {
          "name": "Interceptors"
        },
        {
          "name": "Mocking HTTP Requests"
        }
      ]
    },
    {
      "title": "(i18n) and Localization",
      "left": [
        {
          "name": "Internationalization (i18n)"
        },
        {
          "name": "Translation Files"
        },
        {
          "name": "Markup Translation"
        },
        {
          "name": "Translation Process"
        }
      ],
      "right": [
        {
          "name": "Localization Configuration"
        },
        {
          "name": "Dynamic Localization"
        },
        {
          "name": "TranslateService"
        },
        {
          "name": "Language Switching"
        },
        {
          "name": "Pluralization and Selectors"
        }
      ]
    },
    {
      "title": "SSR (Angular Universal)",
      "left": [
        {
          "name": "Server-Side Rendering (SSR)"
        },
        {
          "name": "Angular Universal"
        },
        {
          "name": "Prerequisites"
        },
        {
          "name": "Setup and Configuration"
        },
        {
          "name": "Rendering Process"
        }
      ],
      "right": [
        {
          "name": "Data Transfer"
        },
        {
          "name": "Lifecycle Hooks"
        },
        {
          "name": "Deployment"
        },
        {
          "name": "Angular Universal with Angular CLI"
        }
      ]
    },
    {
      "title": "Testing",
      "left": [
        {
          "name": "Testing Frameworks"
        },
        {
          "name": "Test Bed"
        },
        {
          "name": "Unit Testing"
        },
        {
          "name": "Component Testing"
        },
        {
          "name": "Mocking Dependencies"
        }
      ],
      "right": [
        {
          "name": "Integration Testing"
        },
        {
          "name": "Mocking HTTP Requests"
        },
        {
          "name": "E2E Testing"
        },
        {
          "name": "Test Coverage"
        },
        {
          "name": "Continuous Integration"
        }
      ]
    },
    {
      "title": "Performance Optimization",
      "left": [
        {
          "name": "Change Detection Optimization"
        },
        {
          "name": "Lazy Loading"
        },
        {
          "name": "AOT Compilation"
        },
        {
          "name": "Code Minification and Bundling"
        },
        {
          "name": "Optimizing Images"
        }
      ],
      "right": [
        {
          "name": "Caching and HTTP Optimization"
        },
        {
          "name": "Performance Profiling"
        },
        {
          "name": "Optimizing Angular Router"
        },
        {
          "name": "Memory Management"
        },
        {
          "name": "Third-Party Libraries"
        }
      ]
    },
    {
      "title": "Deployment",
      "left": [
        {
          "name": "Build the Application"
        },
        {
          "name": "Choose a Hosting Environment"
        },
        {
          "name": "Server Configuration"
        },
        {
          "name": "Static File Deployment"
        }
      ],
      "right": [
        {
          "name": "Domain and DNS Configuration"
        },
        {
          "name": "HTTPS and SSL Certificates"
        },
        {
          "name": "Continuous Integration and Deployment (CI/CD)"
        },
        {
          "name": "Testing and Verification"
        },
        {
          "name": "Monitoring and Maintenance"
        }
      ]
    },
    {
      "title": "Angular Material",
      "left": [
        {
          "name": "Installation"
        },
        {
          "name": "Component Library"
        },
        {
          "name": "Theming"
        },
        {
          "name": "Responsive Design"
        },
        {
          "name": "Accessibility"
        },
        {
          "name": "Form Controls"
        }
      ],
      "right": [
        {
          "name": "Data Tables"
        },
        {
          "name": "Dialogs and Modals"
        },
        {
          "name": "Snackbar and Toast"
        },
        {
          "name": "Iconography"
        },
        {
          "name": "Internationalization (i18n)"
        },
        {
          "name": "Integration with Angular CDK"
        }
      ]
    },
    {
      "title": "Angular Animation",
      "left": [
        {
          "name": "Animation Module"
        },
        {
          "name": "Animation Trigger"
        },
        {
          "name": "States and Transitions"
        },
        {
          "name": "Keyframes and Styles"
        },
        {
          "name": "Animation Functions"
        }
      ],
      "right": [
        {
          "name": "Triggering Animations"
        },
        {
          "name": "Animation Metadata"
        },
        {
          "name": "Grouping and Sequencing"
        },
        {
          "name": "Dynamic Animations"
        },
        {
          "name": "Integration with Angular Directives"
        }
      ]
    }
  ]
}